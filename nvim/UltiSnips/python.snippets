#{{{ setup tools
snippet setup "setup  a package"
setup(name = ${1:"package name},
version = ${2:"0.1"},
description =${3:" describe your project"},
url = ${4: " url github"},
author = ${5: "A.Belcaid"},
licence ='MTI',
packages  = [${6:"packages}],
install_requires = [${7:"packages"}]
zip_safe = False
)
$0
endsnippet
#}}}


#{{{:Argparg
snippet defaultParser "Code for a default parser"
#default parser
parser = argparse.ArgumentParser()
${1:add argument}

#parse arguments
args = parser.parse_args()
$0
endsnippet

snippet addArg "add an argument to the parser"

parser.add_argument("-${1:short}","--${2:long}",type=${3:type},choices={${4:[]},\
help=${5:help message})
$0
endsnippet
#}}}


#{{{ Numpy,pandas, warnings
snippet inp "import numpy as np"
import numpy as np
$0
endsnippet

snippet itf "import tensorflow as tf"
import tensorflow as tf
	$0
endsnippet
	

snippet ipd "import pandas as pd"
import pandas as pd
$0
endsnippet

snippet imatplot "import matplotlib "
import matplotlib.pyplot as plt
$0
endsnippet

snippet noWarn "Supress warnings "
import warnings
warnings.filterwarnings('ignore')
endsnippet
	
snippet silentTF "supress tensorflow log"
os.environ['TF_CPP_MIN_LOG_LEVEL']  = ${1:'2'}
$0
endsnippet
#}}}


# Regular expression {{{ #
snippet re "import regular expression module"
import re
endsnippet


snippet recmp "compile a regular expression"
${1: pattern} = re.compile(r'${2:}')
$0
endsnippet
# }}} Regular expression #
