#{{{ Google Test
snippet Test "Simple Unit Test"
TEST (${1:testSuit}, ${2:testCase}) { 
    EXPECT_EQ(${3:value1},${4:value2})
}
$0
endsnippet


snippet GTest_m "Google Test main"
int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
endsnippet
#}}}


#{{{ Starting files
#{{{ new file speed up
snippet simFile " create a new simple file whit header file included"
#include <iostream>
#include <string>
#include <vector>

using namespace std;


int main(int argc, char *argv[])
{
	$0;  
  return 0;
}
endsnippet
#}}}

#{{{ Leeet code
snippet startFile "starting file for leet code need more dev"

#include <iostream>
#include <string>
#include <map>

using namespace std;

int main(int argc, char *argv[])
{
$0
  return 0;
}
endsnippet
#}}}
#}}}


snippet vCout "vector cout should be implemented as template"
for(auto v: ${1:vector})
	cout<<v<<" ";
cout<<endl;
$0
endsnippet


snippet empty "empty snippet for competetive"
#include<bits/stdc++.h>
#include <iostream>
#include <string>

using namespace std;

int main()
{
	//solution comes here
	$0
}
endsnippet

#{{{ Google test

snippet gtestMain "execute all the tests"
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
endsnippet
#}}}
